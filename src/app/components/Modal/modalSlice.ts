import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../../app/store';
// import { fetchCount } from './counterAPI';

export interface ModalState {
  visible: boolean;
  type: string,
  props: any;
  components: Record<string, any>,
}

const initialState: ModalState = {
  visible: false,
  type: '',
  props: undefined,
  components: {}
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    // const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    // return response.data;
  }
);

export const modalSlice = createSlice({
  name: 'modal',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    show: (state, action: PayloadAction<{ type: string }>) => {
      const { type, ...rest } = action.payload;
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.visible = true;
      state.type = type;
      state.props = rest;
    },
    hide: (state) => {
      state.visible = false;
      state.type = '';
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setVisibility: (state, action: PayloadAction<{visible: boolean, type: string}>) => {
      state.visible = action.payload.visible;
      state.type = action.payload.type;
    },
    // setType: (state, action: PayloadAction<string>) => {
    //   state.type = action.payload;
    // },
    // registerModal: (state, action: PayloadAction<{type: string, component: any}>) => {
    //   console.log('registerModal called');
    //   if (!state.components[action.payload.type]) {
    //     console.log('registered new modal type: ', action.payload.type);
    //     state.components[action.payload.type] = action.payload.component;
    //   }
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
});

export const { show, hide, setVisibility } = modalSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectVisibility = (state: RootState) => state.modal.visible;
export const selectModal = (state: RootState) => state.modal;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default modalSlice.reducer;
